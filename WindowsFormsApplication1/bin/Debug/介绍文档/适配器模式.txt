    适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本接口不匹配而无法在一起工作的两个类能够在一起工作。
    本质：转换匹配，复用功能    实际上在软件系统设计和开发中，这种问题也会经常遇到：我们为了完成某项工作购买了一个第三方的库来加快开发。这就带来了一个问题：我们在应用程序中已经设计好了接口，与这个第三方提供的接口不一致，为了使得这些接口不兼容的类（不能在一起工作）可以在一起工作，Adapter模式提供了将一个类（第三方库）的接口转化为客户（购买使用者）希望的接口。    适配器的两种形式：类的适配器模式对象的适配器模式主要讲解对象的适配器模式 。
    客户端需要调用Request方法，而Adaptee没有该方法，为了使客户端能够使用Adaptee类，需要提供一个包装（Wrapper）类Adapter。这个包装类包装了一个Adaptee的实例，从而将客户端与Adaptee衔接起来。由于Adapter与Adaptee是委派（组合）关系，这决定了这个适配器模式是对象的。目标（Target）角色：这是客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。源（Adaptee）角色：需要适配的类。适配器（Adapter）角色：通过在内部包装（Wrap）一个Adaptee对象，把源接口转换成目标接口。    Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用、类库迁移等方面非常有用。Adapter模式有对象适配器和类适配器两种形式的实现结构，但是类适配器采用“多继承”的实现方式，带来了不良的高耦合，所以一般不推荐使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。    应用场景：系统需要使用现有的类，而此类的接口不符合系统的需要。想要建立一个可以重复使用的类，该类可能与其它不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。（对对象适配器而言）在设计里，你想使用一些已经存在的子类，但是不可能对每一个子类都进行适配。对象适配器可以适配它们的父类接口。    优点：更好的复用性更好的可扩展性在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。
    缺点：过多地使用适配器，会让系统非常凌乱，不容易整体进行把握。