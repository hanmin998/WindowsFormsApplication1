    Singleton模式是设计模式中最为简单、最为常见、最容易实现，也是最应该熟悉和掌握的模式。公司企业在招聘的时候为了考察员工对设计的了解和把握，考的最多的就是Singleton模式。
    本质：控制实例数目。
    Singleton模式解决问题十分常见，我们怎样去创建一个唯一的变量（对象）保证一个类仅有一个实例，并提供一个访问它的全局访问点。例如：打印机 。
    Singleton模式包含的角色只有一个，就是Singleton。Singleton拥有一个私有构造函数，确保用户无法通过new直接实例它。除此之外，该模式中包含一个静态私有成员变量instance与静态公有方法GetInstance。GetInstance方法负责检验并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。     单例类只能有一个实例。单例类必须自己创建自己的唯一实例。 单例类必须给所有其它对象提供这一实例。    单例模式的实现又分为两种：懒汉式单例模式（时间换空间）饿汉式单例模式（空间换时间）。
    使用Singleton模式有一个必要条件：在一个系统要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就不要使用单例模式。