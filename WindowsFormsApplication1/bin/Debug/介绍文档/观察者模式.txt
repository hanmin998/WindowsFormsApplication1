    观察者模式:定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。
    本质：触发联动
    观察者模式又叫做:发布-订阅（Publish/Subscribe）模式模型-视图（Model/View）模式源-监听器（Source/Listener）模式从属者（Dependents）模式。    抽象主题（Subject）角色：一个目标可以被多个观察者观察目标提供对观察者注册和退订的维护当目标的状态发生变化时，目标负责通知所有注册的、有效地观察者。抽象观察者（Observer）角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己。这个接口叫做更新接口。抽象观察者角色一般用一个抽象类或者一个接口实现。在这个示意性的实现中，更新接口只包含一个方法（即Update()方法），这个方法叫做更新方法。 具体主题（ConcreteSubject）角色：将有关状态存入具体现察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者角色（Concrete Observable）。具体主题角色通常用一个具体子类实现。具体观察者（ConcreteObserver）角色：具体现察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。如果需要，具体现察者角色可以保存一个指向具体主题对象的引用。具体观察者角色通常用一个具体子类实现。 
    认识观察模式：目标和观察者之间的关系典型的一对多的关系单向依赖观察者依赖于目标触发通知的时机完成了状态维护后触发相互观察A、B观察C，B、C观察A（两套观察模式）注意死循环通知的顺序绝对不要依赖于通知的顺序，多个观察者之间的功能是平行的，相互不应该有先后的依赖关系。
    在C#中实现Observer模式没有这么辛苦，.NET中提供了Delegate与Event机制，我们可以利用这种机制简化Observer模式
     优点：观察者模式实现了观察者和目标之间的抽象耦合。观察者模式实现了动态联动观察者模式支持广播通信。被观察者会向所有的登记过的观察者发出通知。
     缺点：可能会引起无谓的操作。由于采用广播方式，不管观察者需不需要，每个观察者都会被调用update方法。