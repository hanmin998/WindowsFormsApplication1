    策略模式（Strategy）：它定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的用户。
    策略模式是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有算法，减少了各种算法类与使用算法类之间的耦合。
    本质：分离算法，选择实现。
    使用策略模式可以把行为和环境分割开来。环境类负责维持和查询行为类，各种算法则在具体策略类（ConcreteStrategy）中提供。由于算法和环境独立开来，算法的增减、修改都不会影响环境和客户端。当出现新的促销折扣或现有的折扣政策出现变化时，只需要实现新的策略类，并在客户端登记即可。策略模式相当于"可插入式（Pluggable）的算法"。
    策略模式是对算法的包装，是把使用算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法包装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是："准备一组算法，并将每一个算法封装起来，使得它们可以互换。"      策略模式的Strategy类层次为Context定义了一系列可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。
    这个模式涉及到三个角色：环境（Context）角色：持有一个Strategy类的引用（上下文对象），负责和具体的策略类交互。 抽象策略（Strategy）角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。 具体策略（ConcreteStrategy）角色：包装了相关的算法或行为。
    策略模式功能把具体算法从具体业务处理中独立策略模式与if-else语句多个if-else出现考虑使用策略模式算法的平等性策略算法是形同行为的不同实现谁来选择具体策略算法客户端由上下文来选择具体的策略算法
    应用场景：出现有许多相关的类，仅仅是行为有差别的情况，可以使用策略模式来使用多个行为中的一个来配置一个类的方法，实现算法动态切换 出现同一个算法，有很多不同的实现的情况，可以使用策略模式来把这些“不同的实现”实现成为一个算法的类层次 需要封装算法中，与算法相关的数据的情况，可以使用策略模式来避免暴露这些跟算法相关的数据结构 出现抽象一个定义了很多行为的类，并且是通过多个if-else语句来选择这些行为的情况，可以使用策略模式来代替这些条件语句。
    优点：策略模式可以避免让客户端涉及到不必要接触到的复杂的和只与算法有关的数据。避免使用难以维护的多重条件选择语句更好的扩展。
    缺点：上述策略模式，把分支判断又放回到客户端，要改变需求算法时，还是要去更改客户端的程序。 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。增加了对象的数目只适合扁平的算法结构。
    经典案例：1.容错恢复机制：应用程序开发中常见的功能程序运行的时候，正常情况下应该按某种方式来做，如果按照某种方式来做发生错误的话，系统并不会崩溃，而是继续运行，能提供出错后的备用方案。2.日志记录：把日志记录到数据库和日志记录到文件当做两种记录日志的策略。
    举例：《三国演义》中的故事诸葛亮的锦囊妙计（三条妙计）：走乔国老的后门，求孙国太放人，请孙夫人退兵。赵云按计行事。环境角色：赵云，由他来决定选择策略；抽象策略角色：(接口)锦囊妙计，按计行事（抽象方法）；具体策略角色：三条妙计(单独使用的)。