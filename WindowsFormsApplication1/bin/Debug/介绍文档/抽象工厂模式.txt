    定义：提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。
    本质：选择产品簇的实现。    
    抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。
    为了方便引入抽象工厂模式，引进一个新概念：产品族（Product Family）。所谓产品族，是指位于不同产品等级结构，功能相关联的产品组成的家族。
    所谓的抽象工厂是指一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象。
    抽象工厂（Abstract Factory）角色：担任这个角色的是工厂方法模式的核心，它是与应用系统商业逻辑无关的。 具体工厂（Concrete Factory）角色：这个角色直接在客户端的调用下创建产品的实例。这个角色含有选择合适的产品对象的逻辑，而这个逻辑是与应用系统的商业逻辑紧密相关的。抽象产品（Abstract Product）角色：担任这个角色的类是工厂方法模式所创建的对象的父类，或它们共同拥有的接口。具体产品（Concrete Product）角色：抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。这是客户端最终需要的东西，其内部一定充满了应用系统的商业逻辑。 
    抽象工厂与工厂模式：AbstractFactory模式是为创建一组（有多类）相关或依赖的对象提供创建接口。Factory模式是为一类对象提供创建接口。
    优缺点（从开放-封闭原则）：“开放－封闭”原则要求系统对扩展开放，对修改封闭。通过扩展达到增强其功能的目的。对于涉及到多个产品族与多个产品等级结构的系统，其功能增加包括两方面：增加产品族：Abstract Factory很好的支持了"开放－封闭"原则。增加新产品的等级结构：需要修改所有的工厂角色，没有很好支持“开放－封闭”原则。分离接口和实现，使得客户端从具体的产品实例中解耦综合起来，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，而不能为新的产品等级结构的增加提供这样的方便。     应用场景：希望一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节 时。一个系统有多于一个的产品族，而系统只消费其中某一产品族。
    补充：依赖注入(Dependency Injection)和控制反转(Inversion of Control)是同一个概念。具体含义是:当某个角色需要另一个角色的协助时，在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在“依赖注入”里，创建被调用者的工作不再由调用者来完成，因此称为控制反转;创建被调用者 实例的工作通常由Ioc容器来完成，然后注入调用者，因此也称为依赖注入。
Using System.
ReflectionAssembly.Load(“程序集名称”).CreateInstance(“命名空间.类名称”)