    组合模式有时又叫做部分－整体模式（Part-Whole）。组合模式将对象组织到树结构中，可以用来描述整体与部分的关系。组合模式可以使客户端将单纯元素与复合元素同等看待。
    本质：统一叶子对象和组合对象。
    对象的树结构：一个树结构由两种节点组成：树枝节点和树叶节点。树枝节点可以有子节点，而一个树叶节点不可以有子节点。除了根节点外，其它节点有且只有一个父节点。    抽象构件（Component）角色：这是一个抽象角色，它给参与组合的对象规定一个接口。这个角色给出共有接口及其默认行为。树叶构件（Leaf）角色：代表参加组合的树叶对象。一个树叶对象没有下级子对象。 树枝构件（Composite）角色：代表参加组合的有子对象的对象，并给出树枝构件对象的行为。
    组合模式的目的让客户端不再区分操作的是组合对象还是叶子对象，而是以一种统一的方式来操作。
    对象树：组合模式会组合出树形结构来，这也就意味着，所有可以使用对象树来描述或操作的功能，都可以考虑使用组合模式。比如读取XML文件，或是对语句进行语法分析等。
    组合模式的实现根据所实现接口的区别分为两种形式，分别称为安全模式和透明模式。组合模式可以不提供父对象的管理方法，但组合模式必须在合适的地方提供子对象的管理方法（诸如：add、remove、Display等）。
    透明方式：在Component里面声明所有的用来管理子类对象的方法，包括add（）、remove（），以及Display（）方法。
    优点：所有的构件类都有相同的接口。在客户端看来，树叶类对象与组合类对象的区别起码在接口层次上消失了，客户端可以同等的对待所有的对象。这就是透明形式的组合模式。
    缺点：不够安全，因为树叶类对象和合成类对象在本质上是有区别的。树叶类对象不可能有下一个层次的对象，因此add（）、remove（）以及Display（）方法没有意义，是在编译时期不会出错，而只会在运行时期才会出错。
    安全方式：在Composite类里面声明所有的用来管理子类对象的方法 。
    优点：这样的做法是安全的做法 ，树叶类型的对象根本就没有管理子类对象的方法，因此，如果客户端对树叶类对象使用这些方法时，程序会在编译时期出错。
    缺点 ：不够透明，树叶类和合成类将具有不同的接口   
    举例：在绘图编辑器和图形捕捉系统这样的图形应用程序中，用户可以使用简单的组件创建复杂的图表。用户可以组合多个简单组件以形成一些较大的组件，这些组件又可以组合成更大的组件。一个简单的实现方法是为Text和Line这样的图元定义一些类，另外定义一些类作为这些图元的容器类(Container)。然而这种方法存在一个问题：使用这些类的代码必须区别对待图元对象与容器对象，而实际上大多数情况下用户认为它们是一样的。对这些类区别使用，使得程序更加复杂。Composite模式描述了如何使用递归组合，使得用户不必对这些类进行区别。
     应用场景：需求中是体现部分与整体层次的结构时希望用户忽略组合对象与单个对象的不同，统一的使用组合结构中的所有对象时。