using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApplication2
{
    class Program
    {
        static void Main(string[] args)
        {
            Resume a = new Resume("大鸟");
            a.SetPersonalInfo("男", "29");
            a.SetWorkExperience("1998-2000","xx公司");
            Resume b = (Resume)a.Clone();  //只需要调用Clone方法就可以实现新简历的生成，并且可以再修改新简历的细节；
            b.SetWorkExperience("1998-2006", "YY公司");
            Resume c = (Resume)a.Clone();
            c.SetPersonalInfo("男", "24");
            c.SetWorkExperience("1998-2003", "ZZ企业");
            a.Display();
            b.Display();
            c.Display();
            Console.Read();
        }
    }
    //工作经历
    class WorkExperience:ICloneable {
        private string workDate;
        public string WorkDate {
            get { return workDate; }
            set { workDate = value; }
        }
        private string company;
        public string Company {
            get { return company; }
            set { company = value; }
        }
        public Object Clone() {
            return (Object)this.MemberwiseClone();
        }
    }
    //简历
    class Resume : ICloneable {
        private string name;
        private string sex;
        private string age;
        private WorkExperience work;  //引用“工作经历”对象；
        public Resume(string name) {
            this.name = name;
            work = new WorkExperience();  //在“简历”类实例化时同时实例化“工作经历”;
        }
        private Resume(WorkExperience work) {  //提供Clone方法调用的私有构造函数，以便克隆“工作经历”的数据；
            this.work = (WorkExperience)work.Clone();
        }
        //设置个人信息
        public void SetPersonalInfo(string sex, string age) {
            this.sex = sex;
            this.age = age;
        }
        //设置工作经历
        public void SetWorkExperience(string workDate, string company) {
            work.WorkDate = workDate; //调用此方法时，给对象的两属性赋值；
            work.Company = company;
        }
        //显示
        public void Display() {
            Console.WriteLine("{0} {1} {2}", name, sex, age);
            Console.WriteLine("工作经历：{0} {1}", work.WorkDate,work.Company);  //显示时，显示工作经历的两属性值；
        }
        public Object Clone() {
            Resume obj = new Resume(this.work);
            obj.name = this.name;
            obj.sex = this.sex;
            obj.age = this.age;
            return obj;
        }
    }
}
